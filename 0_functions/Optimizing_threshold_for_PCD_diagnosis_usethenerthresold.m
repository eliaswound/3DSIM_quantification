% optimizing threshold for PCD diagnosis
folder_name=uigetdir('Please select the folder that contains all the .mat file generated by PCD_diagnosis_v4_freedraw_contrast_3D');
cd(folder_name);
files = dir([folder_name '\*_rawdata.mat']);
all=[];

threshold_red=1000;
threshold_green=300;

for j=1:length(files) 
    data=importdata(files(j).name);
    
        red_pixel_sum=0;
        red_intensity_sum=0;
        green_pixel_sum=0;
        green_intensity_sum=0;
        pixeloverlap_sum=0;
        redoverlapintensity_sum=0;
        greenoverlapintensity_sum=0;
        cell_volume=0;

        for i=1:data.num_images/2
            %frame_all=[frame_all;i];
            red_temp=data.red_raw(:,:,i);
            green_temp=data.green_raw(:,:,i);
            % Identify the pixel ID in the red-temp with the pixel value above
            % threshold
            red_index_refer=find(red_temp(data.InboundaryIndexlist_red)>threshold_red);
            red_index=data.InboundaryIndexlist_red(red_index_refer);
            % Refresh the parameters of the red parts
            red_pixel_temp=length(red_index);
            red_pixel_sum=red_pixel_sum+red_pixel_temp;
            red_intensity_temp=sum(red_temp(red_index));
            red_intensity_sum=red_intensity_sum+red_intensity_temp;
            clear red_pixel_temp red_intensity_temp
            % Identify the pixel ID of in the green-temp with the pixel value above
            % threshold
            green_index_refer=find(green_temp(data.InboundaryIndexlist_green)>threshold_green);
            green_index=data.InboundaryIndexlist_green(green_index_refer);
            % Refresh the parameters of the green parts
            green_pixel_temp=length(green_index);
            green_pixel_sum=green_pixel_sum+green_pixel_temp;
            green_intensity_temp=sum(green_temp(green_index));
            green_intensity_sum=green_intensity_sum+green_intensity_temp; 
            clear green_pixel_temp green_intensity_temp 

            red_green_intersect=intersect(red_index, green_index);
            red_green_union=union(red_index, green_index);
            % Calculate the colocalization part     
        %    if ~isempty(length(red_green_intersect))
            pixeloverlap_temp=length(red_green_intersect);
            redoverlapintensity_temp=sum(red_temp(red_green_intersect));
            greenoverlapintensity_temp=sum(green_temp(red_green_intersect));  

            pixeloverlap_sum=pixeloverlap_sum+pixeloverlap_temp;
            redoverlapintensity_sum=redoverlapintensity_sum+redoverlapintensity_temp;
            greenoverlapintensity_sum=greenoverlapintensity_sum+greenoverlapintensity_temp;
            clear redoverlapintensity_temp greenoverlapintensity_temp
            clear red_green_intersect
           %and the volume of the cell 
            cell_volume=cell_volume+length(red_green_union);
            clear red_green_union
        end
     OverlapAreaDividedByRed=pixeloverlap_sum/red_pixel_sum;
     RedOverlapIntensityRatio=redoverlapintensity_sum/red_intensity_sum;
     GreenOverlapIntensityRatio=greenoverlapintensity_sum/green_intensity_sum;
     green_integrated_intensity_cilia=greenoverlapintensity_sum;
     green_integrated_intensity_cilia=greenoverlapintensity_sum;
  
    %--------------------------------------------------------------------------
    % data saving
    %--------------------------------------------------------------------------
   temp.threshold=[threshold_red,threshold_green];
   temp.cell_volume=cell_volume;
   temp.DNAH11_integratedintensity=green_intensity_sum;
   temp.tubulin_integratedintensity=red_intensity_sum;
   temp.DNAH11_cilia_integratedintensity=green_integrated_intensity_cilia; 
   temp.colocalization_RedOverlapArea=OverlapAreaDividedByRed;
   temp.colocalization_RedOverlapIntIntensityRatio=RedOverlapIntensityRatio;
   temp.colocalization_GreenOverlapIntIntensityRatio=GreenOverlapIntensityRatio;
   k=strfind(files(j).name, 'WT');
   if ~isempty(k)
   temp.wt=1;
   else
   temp.wt=0;
   end
   temp2=[double(temp.threshold(1)),double(temp.threshold(2)),...
       double(temp.cell_volume),double(temp.DNAH11_integratedintensity),...
   double(temp.tubulin_integratedintensity),...
   double(temp.DNAH11_cilia_integratedintensity),...
   double(temp.colocalization_RedOverlapArea),...
  double(temp.colocalization_RedOverlapIntIntensityRatio),...
  double(temp.colocalization_GreenOverlapIntIntensityRatio),double(temp.wt),double(j)];
   all=[all;temp2];

  clear data
end

% check whether the data is wild type or patient

[B,IX] = sort(all(:,2));
all=all(IX,:);
threshold_unique=unique(all(:,2));

final_wt=[];
final_p=[];


for w=1:length(threshold_unique)
    DNAH11_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,4));
    DNAH11_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,4));
    atub_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,5));
    atub_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,5));
    DNAH11cilia_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,6));
    DNAH11cilia_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,6));
    RedArea_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,7));
    RedArea_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,7));
    RedInten_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,8));
    RedInten_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,8));
    GreenInten_wt_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==1,9));
    GreenInten_wt_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==1,9));
    final_wt=[final_wt;threshold_unique(w),DNAH11_wt_mean,DNAH11_wt_std,atub_wt_mean,atub_wt_std,DNAH11cilia_wt_mean,...
        DNAH11cilia_wt_std,RedArea_wt_mean, RedArea_wt_std,RedInten_wt_mean,RedInten_wt_std,GreenInten_wt_mean,GreenInten_wt_std];
    
    DNAH11_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,4));
    DNAH11_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,4));
    atub_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,5));
    atub_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,5));
    DNAH11cilia_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,6));
    DNAH11cilia_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,6));
    RedArea_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,7));
    RedArea_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,7));
    RedInten_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,8));
    RedInten_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,8));
    GreenInten_pa_mean=mean(all(all(:,2)==threshold_unique(w)&all(:,10)==0,9));
    GreenInten_pa_std=std(all(all(:,2)==threshold_unique(w)&all(:,10)==0,9));
    final_p=[final_p;threshold_unique(w),DNAH11_pa_mean,DNAH11_pa_std,atub_pa_mean,atub_pa_std,DNAH11cilia_pa_mean,...
        DNAH11cilia_pa_std,RedArea_pa_mean, RedArea_pa_std,RedInten_pa_mean,RedInten_pa_std,GreenInten_pa_mean,GreenInten_pa_std];
    
end

